"""
Module for demonstrating generator execution
"""

import sys
from pprint import pprint as pp
def gen_test():
    yield 1
    yield 2
    yield 3
    return


def take(count,iterable):
    """Takes items from the front of an iterator

    Args:
        count: The Maximum number of items to retrieve.
        iterable: The Source series.

    Yields:
        At most 'count' items from 'iterable'
    """

    counter = 0
    for item in iterable:
        if counter == count:
            return
        counter += 1
        yield item


def run_take():
    items = [x for x in range(20) if x%2 == 0]
    for item in take(3,items):
        print(item)


def distinct(iterable):
    """Returns Unique values by eliminating duplicates

    Args:
        The Source Series.

    Yields:
        Unique elements in order from iterable
    """

    seen = set()

    for item in iterable:
        if item in seen:
            continue
        yield item
        seen.add(item)


def run_distinct():
    items = [x%5 for x in range(15)]
    for item in distinct(items):
        print(item)

def run_pipeline():
    items = [x % 5 for x in range(15)]
    for item in take(3, distinct(items)):
        print(item)


def lucas():
    yield 2
    a = 2
    b = 1
    while True:
        yield b
        a,b = b, a+b

if __name__ == "__main__":
    g = gen_test()
    a = input("Do you want to see results Y/N: ")
    while a == "Y":
        try:
            pp(next(g))
            a = input("Do you want to see more results Y/N: ")
        except:
            pp("No more results in queue")
            a = "N"

    run_take()
    run_distinct()
    run_pipeline()
    counter = 0
    pp(["",",","",])
    for x in lucas():
        counter += 1
        if counter > 20:
            break
        print(x)
    print(sum(x*x for x in range(1,10000001)))



